plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        url = "https://jm.gserv.me/repository/maven-public/"
    }
    maven {
        name = "Gegy"
        url = uri("https://maven.gegy.dev")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}")

    //lib
    include(modImplementation "com.electronwill.night-config:core:3.6.0")
    include(modImplementation "com.electronwill.night-config:toml:3.6.0")
    include(modImplementation "mysticdrew:common-networking-fabric:${common_networking}")
    modCompileOnly("dev.lambdaurora.lambdynamiclights:lambdynamiclights-api:${lambdynamiclights}")

    modCompileOnly("maven.modrinth:travelersbackpack:${travelersbackpack_fabric}")
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

tasks.withType(Javadoc).configureEach { enabled = false }
